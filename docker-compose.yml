version: '3.8'

# Container will create database and execute scripts.
# On re-starts it will contain data(and not execute scripts) but on re-builds it will not.
services:
  postgres:
    image: postgres:14-alpine
    container_name: metis-sandbox-postgres
    environment:
      - POSTGRES_DB=sandbox_local
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    ports:
      - '5432:5432'
    volumes:
      - ./src/main/resources/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./src/main/resources/database/schema_problem_patterns.sql:/docker-entrypoint-initdb.d/schema_problem_patterns.sql
      - ./src/main/resources/database/schema_lockrepository.sql:/docker-entrypoint-initdb.d/schema_lockrepository.sql
      - ./src/main/resources/database/schema_validation.sql:/docker-entrypoint-initdb.d/schema_validation.sql
  rabbitmq:
    image: rabbitmq:3.11.2-management-alpine
    container_name: metis-sandbox-rabbitmq
    environment:
      - RABBIT_DEFAULT_VHOST=/
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - '5672:5672'
      - '15672:15672'
  mongo:
    image: mongo:6.0.12
    container_name: metis-sandbox-mongo
    environment:
      MONGO_INITDB_DATABASE: metis-sandbox
      MONGO_INITDB_ROOT_USERNAME: guest
      MONGO_INITDB_ROOT_PASSWORD: guest
    ports:
      - '27017:27017'
  solr:
    build:
      context: docker/solr/
      dockerfile: Dockerfile
    container_name: metis-sandbox-solr
    ports:
      - "8983:8983"
      - "9983:9983"
    entrypoint:
      - docker-entrypoint.sh
      - solr
      - start
      - -c
      - -f

  metis-sandbox-localstack-s3:
    image: localstack/localstack:s3-latest
    environment:
      - DEBUG=${DEBUG:-0}
    ports:
      - "4566:4566"
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./docker/volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./docker/localstack/bucket.sh:/etc/localstack/init/ready.d/bucket.sh"

  metis-sandbox-local:
    image: europeana/metis-sandbox:develop
    container_name: metis-sandbox-local
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    environment:
      RABBITMQ_HOST: metis-sandbox-rabbitmq
      MONGO_HOSTS: metis-sandbox-mongo
      POSTGRES_HOST: metis-sandbox-postgres
      JDK_JAVA_OPTIONS: -Xms500m -Xmx500m
    memswap_limit: -1
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1500M
        reservations:
          cpus: '2'
          memory: 1500M
    volumes:
      - /data/metis-configuration/k8s/common-components/custom-truststore-jks/custom-truststore.jks:/data/certificates/custom-truststore.jks
      - /data/metis-configuration/metis-sandbox/metis-sandbox-rest/k8s/overlays/local/components/properties/application.yml:/application.yml
      - /data/metis-configuration/k8s/common-components/log4j2-xml/log4j2.xml:/data/logging/log4j2.xml
    depends_on:
      - rabbitmq
      - mongo
      - postgres
