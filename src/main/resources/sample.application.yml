info:
  app:
    title: &name Metis Sandbox
    description: Sandbox to process Datasets
    version: 1.0.0
    repository: https://github.com/europeana/metis-sandbox
    contact:
      name: Europeana Foundation
      email: info@europeana.eu
      url: www.europeana.eu
spring:
  profiles:
    active: default
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
      - org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
      - de.flapdoodle.embed.mongo.spring.autoconfigure.EmbeddedMongoAutoConfiguration
      - org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration
  application:
    name: *name
  servlet:
    multipart:
      max-file-size: 5MB
  rabbitmq:
    virtual-host: sandbox-develop
    host: localhost
    port: 5672
    username: sandbox
    password: sandbox
    ssl:
      enabled:
      algorithm:
      trust-store:
      trust-store-password:
    listener:
      simple:
        concurrency: 2
        max-concurrency: 2
        prefetch: 1
        retry:
          enabled: true
          initial-interval: 1000ms
          multiplier: 2
          max-attempts: 3
  jpa:
    open-in-view: false

# spring boot actuator see documentation at
# https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/
management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: [ "health", "info", "loggers", "metrics", "scheduledtasks", "beans" ]
  endpoint:
    health: # Shows application health information.
      enabled: true
    info: # Displays arbitrary application info.
      enabled: true
    loggers: # Shows and modifies the configuration of loggers in the application.
      enabled: true
    metrics: # Shows ‘metrics’ information for the current application.
      enabled: true
    scheduledtasks: # Displays the scheduled tasks in your application.
      enabled: true
    beans: # Displays beans in the application only test environment.
      enabled: true
sandbox:
  cors:
    mapping: '*'
  truststore:
    path:
    password:
  datasource:
    jdbcUrl: jdbc:postgresql://localhost:5432/sandbox
    driverClassName: org.postgresql.Driver
    username: sandbox
    password:
    maximumPoolSize: 10           # this is the default we make it explicit in the config.
    leakDetectionThreshold: 5000  # five second should be enough
  rate-limit:
    bandwidth:
      capacity:
      time: # in seconds
  dataset:
    clean:
      frequency: 0 0 0 * * ? # At 00:00:00am every day
      days-to-preserve: 7
    max-size: 1000
    creation:
      threads:
        core-pool-size: 10
        max-pool-size: 40
        thread-prefix: sandbox-
  metrics:
    frequency: '*/5 * * * * *' # every five seconds.
  validation:
    edm-sorter-url: http://ftp.eanadev.org/schema_zips/edm_sorter.xsl
    executor:
      pool-size: 10
    predefinedSchemas:
      EDM-INTERNAL:
        url:
        rootLocation:
        schematronLocation:
      EDM-EXTERNAL:
        url:
        rootLocation:
        schematronLocation:
  transformation:
    xslt-url:
    xslt-update-frequency: 0 0 * * * * # 0 0 * * * * = every hour of every day
  enrichment:
    dereference-url:
    enrichment-properties:
      entity-management-url:
      entity-api-url:
      entity-api-key:
  publish:
    mongo:
      application-name:
      db:
      hosts:
      ports:
      authentication-db:
      username:
      password:
      ssl-enable:
    solr:
      hosts:
  s3:
    access-key:
    secret-key:
    endpoint:
    signing-region:
    thumbnails-bucket:
  portal:
    publish:
      dataset-base-url:
      record-base-url:
  rabbitmq:
    routing-key:
      closed: sandbox.record.closed
    exchange:
      name: sandbox
      dlq: ${sandbox.rabbitmq.exchange.name}.dlq
    queues:
      record:
        log:
          queue: sandbox.record.log
          dlq: ${sandbox.rabbitmq.queues.record.log.queue}.dlq
          routing-key: sandbox.record.#
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        created:
          queue: sandbox.record.created
          dlq: ${sandbox.rabbitmq.queues.record.created.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        transformation:
          edm:
            external:
              queue: sandbox.record.transformation.edm.external
              dlq: ${sandbox.rabbitmq.queues.record.transformation.edm.external.queue}.dlq
              auto-start: true
              concurrency: 2
              max-concurrency: 2
              prefetch: 1
        ordered:
          queue: sandbox.record.ordered
          dlq: ${sandbox.rabbitmq.queues.record.ordered.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        validated:
          external:
            queue: sandbox.record.validated.external
            dlq: ${sandbox.rabbitmq.queues.record.validated.external.queue}.dlq
            auto-start: true
            concurrency: 2
            max-concurrency: 2
            prefetch: 1
          internal:
            queue: sandbox.record.validated.internal
            dlq: ${sandbox.rabbitmq.queues.record.validated.internal.queue}.dlq
            auto-start: true
            concurrency: 2
            max-concurrency: 2
            prefetch: 1
        transformed:
          queue: sandbox.record.transformed
          dlq: ${sandbox.rabbitmq.queues.record.transformed.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        normalized:
          queue: sandbox.record.normalized
          dlq: ${sandbox.rabbitmq.queues.record.normalized.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        enriched:
          queue: sandbox.record.enriched
          dlq: ${sandbox.rabbitmq.queues.record.enriched.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        media:
          queue: sandbox.record.media.processed
          dlq: ${sandbox.rabbitmq.queues.record.media.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
        published:
          queue: sandbox.record.published
          dlq: ${sandbox.rabbitmq.queues.record.published.queue}.dlq
          auto-start: true
          concurrency: 2
          max-concurrency: 2
          prefetch: 1
elastic:
  apm:
    service_name: metis-sandbox-rest-dev
    application_packages: org.europeana,eu.europeana.metis.sandbox
    server_url: http://localhost:8200
    capture_body: all
    capture_headers: true
    metrics_interval: 5s
    environment: dev
    hostname: localhost
    enabled: true
    recording: true
    instrument: true
