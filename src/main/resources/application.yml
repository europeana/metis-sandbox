info:
  app:
    title: &name Metis Sandbox
    description: Sandbox to process Datasets
    version: 1.0.0
    repository: https://github.com/europeana/metis-sandbox

spring:
  profiles:
    active: dev
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
      - org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
      - org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration
      - org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration
  application:
    name: *name
  servlet:
    multipart:
      max-file-size: 5MB
  rabbitmq:
    virtual-host: sandbox-develop
    host: localhost
    port: 5672
    username: sandbox
    password: sandbox
    ssl:
      enabled:
      algorithm:
    listener:
      simple:
        concurrency: 5
        max-concurrency: 10
        prefetch: 1
        retry:
          enabled: true
          initial-interval: 1000ms
          multiplier: 2
          max-attempts: 3
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

sandbox:
  truststore:
    path:
    password:
  datasource:
    jdbcUrl: jdbc:postgresql://localhost:5432/sandbox
    driverClassName: org.postgresql.Driver
    username: sandbox
    password:
  s3:
    access-key:
    secret-key:
    endpoint:
    signing-region:
    thumbnails-bucket:
  dataset:
    max-size: 1000
    creation:
      threads:
        core-pool-size: 10
        max-pool-size: 40
        thread-prefix: sandbox-
  validation:
    executor:
      pool-size: 10
    predefinedSchemas:
      EDM-INTERNAL:
        url:
        rootLocation:
        schematronLocation:
      EDM-EXTERNAL:
        url:
        rootLocation:
        schematronLocation:
  transformation:
    xslt-url:
  enrichment:
    dereference-url:
    enrichment-url:
  indexing:
    mongo:
      db:
      hosts:
      ports:
      authentication-db:
      username:
      password:
      ssl-enable:
    solr:
      hosts:
      zookeeper:
        hosts:
        ports:
        chroot:
        default:
          collection:
        timeout:
  portal:
    url:
  rabbitmq:
    routing-key:
      closed: sandbox.record.closed
    exchange:
      name: sandbox
      dlq: ${sandbox.rabbitmq.exchange.name}.dlq
    queues:
      record:
        log:
          queue: sandbox.record.log
          dlq: ${sandbox.rabbitmq.queues.record.log.queue}.dlq
          routing-key: sandbox.record.#
        created:
          queue: sandbox.record.created
          dlq: ${sandbox.rabbitmq.queues.record.created.queue}.dlq
        ordered:
          queue: sandbox.record.ordered
          dlq: ${sandbox.rabbitmq.queues.record.ordered.queue}.dlq
        validated:
          external:
            queue: sandbox.record.validated.external
            dlq: ${sandbox.rabbitmq.queues.record.validated.external.queue}.dlq
          internal:
            queue: sandbox.record.validated.internal
            dlq: ${sandbox.rabbitmq.queues.record.validated.internal.queue}.dlq
        transformed:
          queue: sandbox.record.transformed
          dlq: ${sandbox.rabbitmq.queues.record.transformed.queue}.dlq
        normalized:
          queue: sandbox.record.normalized
          dlq: ${sandbox.rabbitmq.queues.record.normalized.queue}.dlq
        enriched:
          queue: sandbox.record.enriched
          dlq: ${sandbox.rabbitmq.queues.record.enriched.queue}.dlq
        media:
          queue: sandbox.record.media.processed
          dlq: ${sandbox.rabbitmq.queues.record.media.queue}.dlq
        indexed:
          queue: sandbox.record.indexed
          dlq: ${sandbox.rabbitmq.queues.record.indexed.queue}.dlq
